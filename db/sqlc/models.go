// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PhuongThucTt string

const (
	PhuongThucTtTheTinDung  PhuongThucTt = "the_tin_dung"
	PhuongThucTtChuyenKhoan PhuongThucTt = "chuyen_khoan"
	PhuongThucTtPaypal      PhuongThucTt = "paypal"
	PhuongThucTtMomo        PhuongThucTt = "momo"
	PhuongThucTtZaloPay     PhuongThucTt = "zalo_pay"
	PhuongThucTtKhac        PhuongThucTt = "khac"
)

func (e *PhuongThucTt) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PhuongThucTt(s)
	case string:
		*e = PhuongThucTt(s)
	default:
		return fmt.Errorf("unsupported scan type for PhuongThucTt: %T", src)
	}
	return nil
}

type NullPhuongThucTt struct {
	PhuongThucTt PhuongThucTt `json:"phuong_thuc_tt"`
	Valid        bool         `json:"valid"` // Valid is true if PhuongThucTt is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPhuongThucTt) Scan(value interface{}) error {
	if value == nil {
		ns.PhuongThucTt, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PhuongThucTt.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPhuongThucTt) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PhuongThucTt), nil
}

type TrangThaiDatCho string

const (
	TrangThaiDatChoChoXacNhan  TrangThaiDatCho = "cho_xac_nhan"
	TrangThaiDatChoDaXacNhan   TrangThaiDatCho = "da_xac_nhan"
	TrangThaiDatChoDaThanhToan TrangThaiDatCho = "da_thanh_toan"
	TrangThaiDatChoDaHuy       TrangThaiDatCho = "da_huy"
	TrangThaiDatChoHoanThanh   TrangThaiDatCho = "hoan_thanh"
)

func (e *TrangThaiDatCho) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TrangThaiDatCho(s)
	case string:
		*e = TrangThaiDatCho(s)
	default:
		return fmt.Errorf("unsupported scan type for TrangThaiDatCho: %T", src)
	}
	return nil
}

type NullTrangThaiDatCho struct {
	TrangThaiDatCho TrangThaiDatCho `json:"trang_thai_dat_cho"`
	Valid           bool            `json:"valid"` // Valid is true if TrangThaiDatCho is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTrangThaiDatCho) Scan(value interface{}) error {
	if value == nil {
		ns.TrangThaiDatCho, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TrangThaiDatCho.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTrangThaiDatCho) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TrangThaiDatCho), nil
}

type TrangThaiKhoiHanh string

const (
	TrangThaiKhoiHanhLenLich   TrangThaiKhoiHanh = "len_lich"
	TrangThaiKhoiHanhXacNhan   TrangThaiKhoiHanh = "xac_nhan"
	TrangThaiKhoiHanhHuy       TrangThaiKhoiHanh = "huy"
	TrangThaiKhoiHanhHoanThanh TrangThaiKhoiHanh = "hoan_thanh"
)

func (e *TrangThaiKhoiHanh) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TrangThaiKhoiHanh(s)
	case string:
		*e = TrangThaiKhoiHanh(s)
	default:
		return fmt.Errorf("unsupported scan type for TrangThaiKhoiHanh: %T", src)
	}
	return nil
}

type NullTrangThaiKhoiHanh struct {
	TrangThaiKhoiHanh TrangThaiKhoiHanh `json:"trang_thai_khoi_hanh"`
	Valid             bool              `json:"valid"` // Valid is true if TrangThaiKhoiHanh is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTrangThaiKhoiHanh) Scan(value interface{}) error {
	if value == nil {
		ns.TrangThaiKhoiHanh, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TrangThaiKhoiHanh.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTrangThaiKhoiHanh) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TrangThaiKhoiHanh), nil
}

type TrangThaiTt string

const (
	TrangThaiTtChoXuLy   TrangThaiTt = "cho_xu_ly"
	TrangThaiTtThanhCong TrangThaiTt = "thanh_cong"
	TrangThaiTtThatBai   TrangThaiTt = "that_bai"
	TrangThaiTtHoanTien  TrangThaiTt = "hoan_tien"
)

func (e *TrangThaiTt) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TrangThaiTt(s)
	case string:
		*e = TrangThaiTt(s)
	default:
		return fmt.Errorf("unsupported scan type for TrangThaiTt: %T", src)
	}
	return nil
}

type NullTrangThaiTt struct {
	TrangThaiTt TrangThaiTt `json:"trang_thai_tt"`
	Valid       bool        `json:"valid"` // Valid is true if TrangThaiTt is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTrangThaiTt) Scan(value interface{}) error {
	if value == nil {
		ns.TrangThaiTt, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TrangThaiTt.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTrangThaiTt) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TrangThaiTt), nil
}

type VaiTroNguoiDung string

const (
	VaiTroNguoiDungKhachHang  VaiTroNguoiDung = "khach_hang"
	VaiTroNguoiDungQuanTri    VaiTroNguoiDung = "quan_tri"
	VaiTroNguoiDungNhaCungCap VaiTroNguoiDung = "nha_cung_cap"
)

func (e *VaiTroNguoiDung) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VaiTroNguoiDung(s)
	case string:
		*e = VaiTroNguoiDung(s)
	default:
		return fmt.Errorf("unsupported scan type for VaiTroNguoiDung: %T", src)
	}
	return nil
}

type NullVaiTroNguoiDung struct {
	VaiTroNguoiDung VaiTroNguoiDung `json:"vai_tro_nguoi_dung"`
	Valid           bool            `json:"valid"` // Valid is true if VaiTroNguoiDung is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVaiTroNguoiDung) Scan(value interface{}) error {
	if value == nil {
		ns.VaiTroNguoiDung, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VaiTroNguoiDung.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVaiTroNguoiDung) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VaiTroNguoiDung), nil
}

type AnhTour struct {
	ID           int32            `json:"id"`
	TourID       int32            `json:"tour_id"`
	Link         string           `json:"link"`
	MoTaAlt      *string          `json:"mo_ta_alt"`
	LaAnhChinh   *bool            `json:"la_anh_chinh"`
	ThuTuHienThi *int32           `json:"thu_tu_hien_thi"`
	NgayTao      pgtype.Timestamp `json:"ngay_tao"`
}

type CauHinhNhomTour struct {
	ID          int32            `json:"id"`
	TourID      int32            `json:"tour_id"`
	SoNhoNhat   *int32           `json:"so_nho_nhat"`
	SoLonNhat   *int32           `json:"so_lon_nhat"`
	NgayTao     pgtype.Timestamp `json:"ngay_tao"`
	NgayCapNhat pgtype.Timestamp `json:"ngay_cap_nhat"`
}

type DanhGium struct {
	ID           int32            `json:"id"`
	TourID       int32            `json:"tour_id"`
	NguoiDungID  pgtype.UUID      `json:"nguoi_dung_id"`
	DatChoID     int32            `json:"dat_cho_id"`
	Rating       int32            `json:"rating"`
	TieuDe       *string          `json:"tieu_de"`
	NoiDung      *string          `json:"noi_dung"`
	HinhAnhUrl   []string         `json:"hinh_anh_url"`
	DangHoatDong *bool            `json:"dang_hoat_dong"`
	NgayTao      pgtype.Timestamp `json:"ngay_tao"`
	NgayCapNhat  pgtype.Timestamp `json:"ngay_cap_nhat"`
}

type DanhMucTour struct {
	ID           int32            `json:"id"`
	Ten          string           `json:"ten"`
	MoTa         *string          `json:"mo_ta"`
	Anh          *string          `json:"anh"`
	DangHoatDong *bool            `json:"dang_hoat_dong"`
	NgayTao      pgtype.Timestamp `json:"ngay_tao"`
}

type DatChoTour struct {
	ID                  int32               `json:"id"`
	NguoiDungID         pgtype.UUID         `json:"nguoi_dung_id"`
	KhoiHanhID          int32               `json:"khoi_hanh_id"`
	SoNguoiLon          *int32              `json:"so_nguoi_lon"`
	SoTreEm             *int32              `json:"so_tre_em"`
	SoEmBe              *int32              `json:"so_em_be"`
	TongTien            pgtype.Numeric      `json:"tong_tien"`
	DonViTienTe         *string             `json:"don_vi_tien_te"`
	TrangThai           NullTrangThaiDatCho `json:"trang_thai"`
	PhuongThucThanhToan *string             `json:"phuong_thuc_thanh_toan"`
	NgayDat             pgtype.Timestamp    `json:"ngay_dat"`
	NgayCapNhat         pgtype.Timestamp    `json:"ngay_cap_nhat"`
}

type DiemDen struct {
	ID          int32            `json:"id"`
	Ten         string           `json:"ten"`
	QuocGia     *string          `json:"quoc_gia"`
	KhuVuc      *string          `json:"khu_vuc"`
	MoTa        *string          `json:"mo_ta"`
	Anh         *string          `json:"anh"`
	ViDo        pgtype.Numeric   `json:"vi_do"`
	KinhDo      pgtype.Numeric   `json:"kinh_do"`
	NgayTao     pgtype.Timestamp `json:"ngay_tao"`
	NgayCapNhat pgtype.Timestamp `json:"ngay_cap_nhat"`
}

type GiamGiaTour struct {
	ID          int32            `json:"id"`
	TourID      int32            `json:"tour_id"`
	PhanTram    pgtype.Numeric   `json:"phan_tram"`
	NgayBatDau  pgtype.Date      `json:"ngay_bat_dau"`
	NgayKetThuc pgtype.Date      `json:"ngay_ket_thuc"`
	NgayTao     pgtype.Timestamp `json:"ngay_tao"`
	NgayCapNhat pgtype.Timestamp `json:"ngay_cap_nhat"`
}

type HanhKhachDatCho struct {
	ID        int32       `json:"id"`
	DatChoID  int32       `json:"dat_cho_id"`
	HoTen     string      `json:"ho_ten"`
	NgaySinh  pgtype.Date `json:"ngay_sinh"`
	LoaiKhach *string     `json:"loai_khach"`
	GioiTinh  *string     `json:"gioi_tinh"`
	SoHoChieu *string     `json:"so_ho_chieu"`
	QuocTich  *string     `json:"quoc_tich"`
	GhiChu    *string     `json:"ghi_chu"`
}

type HoatDongLichTrinh struct {
	ID          int32            `json:"id"`
	LichTrinhID int32            `json:"lich_trinh_id"`
	Ten         string           `json:"ten"`
	GioBatDau   pgtype.Time      `json:"gio_bat_dau"`
	GioKetThuc  pgtype.Time      `json:"gio_ket_thuc"`
	MoTa        *string          `json:"mo_ta"`
	ThuTu       *int32           `json:"thu_tu"`
	NgayTao     pgtype.Timestamp `json:"ngay_tao"`
}

type KhoiHanhTour struct {
	ID             int32                 `json:"id"`
	TourID         int32                 `json:"tour_id"`
	NgayKhoiHanh   pgtype.Date           `json:"ngay_khoi_hanh"`
	NgayKetThuc    pgtype.Date           `json:"ngay_ket_thuc"`
	SucChua        int32                 `json:"suc_chua"`
	TrangThai      NullTrangThaiKhoiHanh `json:"trang_thai"`
	HuongDanVienID pgtype.UUID           `json:"huong_dan_vien_id"`
	GiaDacBiet     pgtype.Numeric        `json:"gia_dac_biet"`
	GhiChu         *string               `json:"ghi_chu"`
	NgayTao        pgtype.Timestamp      `json:"ngay_tao"`
	NgayCapNhat    pgtype.Timestamp      `json:"ngay_cap_nhat"`
}

type LichTrinhTour struct {
	ID             int32            `json:"id"`
	TourID         int32            `json:"tour_id"`
	NgayThu        int32            `json:"ngay_thu"`
	TieuDe         string           `json:"tieu_de"`
	MoTa           *string          `json:"mo_ta"`
	GioBatDau      pgtype.Time      `json:"gio_bat_dau"`
	GioKetThuc     pgtype.Time      `json:"gio_ket_thuc"`
	DiaDiem        *string          `json:"dia_diem"`
	ThongTinLuuTru *string          `json:"thong_tin_luu_tru"`
	NgayTao        pgtype.Timestamp `json:"ngay_tao"`
	NgayCapNhat    pgtype.Timestamp `json:"ngay_cap_nhat"`
}

type NguoiDung struct {
	ID           pgtype.UUID         `json:"id"`
	HoTen        string              `json:"ho_ten"`
	Email        string              `json:"email"`
	MatKhauMaHoa string              `json:"mat_khau_ma_hoa"`
	SoDienThoai  *string             `json:"so_dien_thoai"`
	VaiTro       NullVaiTroNguoiDung `json:"vai_tro"`
	DangHoatDong *bool               `json:"dang_hoat_dong"`
	XacThuc      *bool               `json:"xac_thuc"`
	NgayTao      pgtype.Timestamp    `json:"ngay_tao"`
	NgayCapNhat  pgtype.Timestamp    `json:"ngay_cap_nhat"`
}

type NhaCungCap struct {
	ID           int32            `json:"id"`
	Ten          string           `json:"ten"`
	Email        *string          `json:"email"`
	SoDienThoai  *string          `json:"so_dien_thoai"`
	DiaChi       *string          `json:"dia_chi"`
	Website      *string          `json:"website"`
	MoTa         *string          `json:"mo_ta"`
	LogoUrl      *string          `json:"logo_url"`
	TrangThai    *string          `json:"trang_thai"`
	NguoiDaiDien *string          `json:"nguoi_dai_dien"`
	DangHoatDong *bool            `json:"dang_hoat_dong"`
	NgayTao      pgtype.Timestamp `json:"ngay_tao"`
	NgayCapNhat  pgtype.Timestamp `json:"ngay_cap_nhat"`
}

type NhaCungCapOauth struct {
	ID           pgtype.UUID      `json:"id"`
	Ten          string           `json:"ten"`
	ClientID     string           `json:"client_id"`
	ClientSecret string           `json:"client_secret"`
	RedirectUri  string           `json:"redirect_uri"`
	NgayTao      pgtype.Timestamp `json:"ngay_tao"`
	NgayCapNhat  pgtype.Timestamp `json:"ngay_cap_nhat"`
}

type PhienDangNhap struct {
	ID               int32            `json:"id"`
	NguoiDungID      pgtype.UUID      `json:"nguoi_dung_id"`
	AccessTokenHash  string           `json:"access_token_hash"`
	RefreshTokenHash string           `json:"refresh_token_hash"`
	ThoiHanToken     pgtype.Timestamp `json:"thoi_han_token"`
	ThongTinThietBi  *string          `json:"thong_tin_thiet_bi"`
	DangHoatDong     *bool            `json:"dang_hoat_dong"`
	NgayTao          pgtype.Timestamp `json:"ngay_tao"`
	NgayCapNhat      pgtype.Timestamp `json:"ngay_cap_nhat"`
}

type TaiKhoanOauth struct {
	ID           pgtype.UUID      `json:"id"`
	NguoiDungID  pgtype.UUID      `json:"nguoi_dung_id"`
	NhaCungCapID pgtype.UUID      `json:"nha_cung_cap_id"`
	MaTaiKhoan   string           `json:"ma_tai_khoan"`
	Email        *string          `json:"email"`
	AnhDaiDien   *string          `json:"anh_dai_dien"`
	AccessToken  *string          `json:"access_token"`
	RefreshToken *string          `json:"refresh_token"`
	HetHanToken  pgtype.Timestamp `json:"het_han_token"`
	NgayTao      pgtype.Timestamp `json:"ngay_tao"`
	NgayCapNhat  pgtype.Timestamp `json:"ngay_cap_nhat"`
}

type ThanhToan struct {
	ID            int32            `json:"id"`
	DatChoID      int32            `json:"dat_cho_id"`
	SoTien        pgtype.Numeric   `json:"so_tien"`
	DonViTienTe   *string          `json:"don_vi_tien_te"`
	PhuongThuc    PhuongThucTt     `json:"phuong_thuc"`
	TrangThai     NullTrangThaiTt  `json:"trang_thai"`
	MaGiaoDich    *string          `json:"ma_giao_dich"`
	NgayThanhToan pgtype.Timestamp `json:"ngay_thanh_toan"`
	NgayCapNhat   pgtype.Timestamp `json:"ngay_cap_nhat"`
	GhiChu        *string          `json:"ghi_chu"`
}

type Tour struct {
	ID           int32            `json:"id"`
	TieuDe       string           `json:"tieu_de"`
	MoTa         *string          `json:"mo_ta"`
	DanhMucID    *int32           `json:"danh_muc_id"`
	SoNgay       int32            `json:"so_ngay"`
	SoDem        int32            `json:"so_dem"`
	GiaMoiNguoi  pgtype.Numeric   `json:"gia_moi_nguoi"`
	DonViTienTe  *string          `json:"don_vi_tien_te"`
	TrangThai    *string          `json:"trang_thai"`
	NoiBat       *bool            `json:"noi_bat"`
	NguoiTaoID   pgtype.UUID      `json:"nguoi_tao_id"`
	NhaCungCapID *int32           `json:"nha_cung_cap_id"`
	DangHoatDong *bool            `json:"dang_hoat_dong"`
	NgayTao      pgtype.Timestamp `json:"ngay_tao"`
	NgayCapNhat  pgtype.Timestamp `json:"ngay_cap_nhat"`
}

type TourDiemDen struct {
	TourID            int32  `json:"tour_id"`
	DiemDenID         int32  `json:"diem_den_id"`
	ThuTuThamQuan     *int32 `json:"thu_tu_tham_quan"`
	ThoiGianLuuTruGio *int32 `json:"thoi_gian_luu_tru_gio"`
}
