// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tour.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllTour = `-- name: GetAllTour :many
SELECT
  id,
  tieu_de,
  mo_ta,
  danh_muc_id,
  so_ngay,
  so_dem,
  gia_moi_nguoi,
  don_vi_tien_te,
  trang_thai,
  noi_bat,
  nguoi_tao_id,
  nha_cung_cap_id,
  dang_hoat_dong,
  ngay_tao,
  ngay_cap_nhat
FROM tour
`

func (q *Queries) GetAllTour(ctx context.Context) ([]Tour, error) {
	rows, err := q.db.Query(ctx, getAllTour)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tour
	for rows.Next() {
		var i Tour
		if err := rows.Scan(
			&i.ID,
			&i.TieuDe,
			&i.MoTa,
			&i.DanhMucID,
			&i.SoNgay,
			&i.SoDem,
			&i.GiaMoiNguoi,
			&i.DonViTienTe,
			&i.TrangThai,
			&i.NoiBat,
			&i.NguoiTaoID,
			&i.NhaCungCapID,
			&i.DangHoatDong,
			&i.NgayTao,
			&i.NgayCapNhat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTourCategory = `-- name: GetAllTourCategory :many
select id, ten, mo_ta, anh, dang_hoat_dong, ngay_tao from danh_muc_tour
`

func (q *Queries) GetAllTourCategory(ctx context.Context) ([]DanhMucTour, error) {
	rows, err := q.db.Query(ctx, getAllTourCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DanhMucTour
	for rows.Next() {
		var i DanhMucTour
		if err := rows.Scan(
			&i.ID,
			&i.Ten,
			&i.MoTa,
			&i.Anh,
			&i.DangHoatDong,
			&i.NgayTao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTourWithRelations = `-- name: GetAllTourWithRelations :many
SELECT
  t.id,
  t.tieu_de,
  t.mo_ta,
  t.danh_muc_id,
  t.so_ngay,
  t.so_dem,
  t.gia_moi_nguoi,
  t.don_vi_tien_te,
  t.trang_thai,
  t.noi_bat,
  t.nguoi_tao_id,
  t.nha_cung_cap_id,
  t.dang_hoat_dong,
  t.ngay_tao,
  t.ngay_cap_nhat,
  dm.ten AS danh_muc_ten,
  ncc.ten AS nha_cung_cap_ten,
  (
    SELECT a.link
    FROM anh_tour a
    WHERE a.tour_id = t.id
    ORDER BY COALESCE(a.la_anh_chinh, false) DESC, COALESCE(a.thu_tu_hien_thi, 0) ASC, a.id ASC
    LIMIT 1
  ) AS anh_chinh,
  dd.diem_den,
  dg.avg_rating,
  dg.total_reviews,
  kh.next_departure_date,
  kh.min_price
FROM tour t
LEFT JOIN danh_muc_tour dm ON dm.id = t.danh_muc_id
LEFT JOIN nha_cung_cap ncc ON ncc.id = t.nha_cung_cap_id
LEFT JOIN (
  SELECT td.tour_id, array_agg(DISTINCT d.ten) AS diem_den
  FROM tour_diem_den td
  JOIN diem_den d ON d.id = td.diem_den_id
  GROUP BY td.tour_id
) dd ON dd.tour_id = t.id
LEFT JOIN (
  SELECT tour_id, AVG(rating)::float AS avg_rating, COUNT(*)::int AS total_reviews
  FROM danh_gia
  WHERE dang_hoat_dong = TRUE
  GROUP BY tour_id
) dg ON dg.tour_id = t.id
LEFT JOIN (
  SELECT
    tour_id,
    MIN(ngay_khoi_hanh) FILTER (WHERE ngay_khoi_hanh >= CURRENT_DATE AND trang_thai IN ('len_lich','xac_nhan')) AS next_departure_date,
    MIN(gia_dac_biet) FILTER (WHERE ngay_khoi_hanh >= CURRENT_DATE AND trang_thai IN ('len_lich','xac_nhan') AND gia_dac_biet IS NOT NULL) AS min_price
  FROM khoi_hanh_tour
  GROUP BY tour_id
) kh ON kh.tour_id = t.id

ORDER BY t.ngay_tao DESC
`

type GetAllTourWithRelationsRow struct {
	ID                int32            `json:"id"`
	TieuDe            string           `json:"tieu_de"`
	MoTa              *string          `json:"mo_ta"`
	DanhMucID         *int32           `json:"danh_muc_id"`
	SoNgay            int32            `json:"so_ngay"`
	SoDem             int32            `json:"so_dem"`
	GiaMoiNguoi       pgtype.Numeric   `json:"gia_moi_nguoi"`
	DonViTienTe       *string          `json:"don_vi_tien_te"`
	TrangThai         *string          `json:"trang_thai"`
	NoiBat            *bool            `json:"noi_bat"`
	NguoiTaoID        pgtype.UUID      `json:"nguoi_tao_id"`
	NhaCungCapID      *int32           `json:"nha_cung_cap_id"`
	DangHoatDong      *bool            `json:"dang_hoat_dong"`
	NgayTao           pgtype.Timestamp `json:"ngay_tao"`
	NgayCapNhat       pgtype.Timestamp `json:"ngay_cap_nhat"`
	DanhMucTen        *string          `json:"danh_muc_ten"`
	NhaCungCapTen     *string          `json:"nha_cung_cap_ten"`
	AnhChinh          string           `json:"anh_chinh"`
	DiemDen           interface{}      `json:"diem_den"`
	AvgRating         float64          `json:"avg_rating"`
	TotalReviews      int32            `json:"total_reviews"`
	NextDepartureDate interface{}      `json:"next_departure_date"`
	MinPrice          interface{}      `json:"min_price"`
}

func (q *Queries) GetAllTourWithRelations(ctx context.Context) ([]GetAllTourWithRelationsRow, error) {
	rows, err := q.db.Query(ctx, getAllTourWithRelations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTourWithRelationsRow
	for rows.Next() {
		var i GetAllTourWithRelationsRow
		if err := rows.Scan(
			&i.ID,
			&i.TieuDe,
			&i.MoTa,
			&i.DanhMucID,
			&i.SoNgay,
			&i.SoDem,
			&i.GiaMoiNguoi,
			&i.DonViTienTe,
			&i.TrangThai,
			&i.NoiBat,
			&i.NguoiTaoID,
			&i.NhaCungCapID,
			&i.DangHoatDong,
			&i.NgayTao,
			&i.NgayCapNhat,
			&i.DanhMucTen,
			&i.NhaCungCapTen,
			&i.AnhChinh,
			&i.DiemDen,
			&i.AvgRating,
			&i.TotalReviews,
			&i.NextDepartureDate,
			&i.MinPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTourDetailByID = `-- name: GetTourDetailByID :one
SELECT
  t.id,
  t.tieu_de,
  t.mo_ta,
  t.danh_muc_id,
  t.so_ngay,
  t.so_dem,
  t.gia_moi_nguoi,
  t.don_vi_tien_te,
  t.trang_thai,
  t.noi_bat,
  t.nguoi_tao_id,
  t.nha_cung_cap_id,
  t.dang_hoat_dong,
  t.ngay_tao,
  t.ngay_cap_nhat
FROM tour t
LEFT JOIN danh_muc_tour dm ON dm.id = t.danh_muc_id
LEFT JOIN nha_cung_cap ncc ON ncc.id = t.nha_cung_cap_id
LEFT JOIN (
  SELECT td.tour_id, array_agg(DISTINCT d.ten) AS diem_den
  FROM tour_diem_den td
  JOIN diem_den d ON d.id = td.diem_den_id
  GROUP BY td.tour_id
) dd ON dd.tour_id = t.id
LEFT JOIN (
  SELECT tour_id, AVG(rating)::float AS avg_rating, COUNT(*)::int AS total_reviews
  FROM danh_gia
  WHERE dang_hoat_dong = TRUE
  GROUP BY tour_id
) dg ON dg.tour_id = t.id
LEFT JOIN (
  SELECT tour_id, MIN(ngay_khoi_hanh) FILTER (WHERE ngay_khoi_hanh >= CURRENT_DATE AND trang_thai IN ('len_lich','xac_nhan')) AS next_departure_date, MIN(gia_dac_biet) FILTER (WHERE ngay_khoi_hanh >= CURRENT_DATE AND trang_thai IN ('len_lich','xac_nhan') AND gia_dac_biet IS NOT NULL) AS min_price
  FROM khoi_hanh_tour
  GROUP BY tour_id
) kh ON kh.tour_id = t.id
WHERE t.id = $1
ORDER BY t.ngay_tao DESC
`

func (q *Queries) GetTourDetailByID(ctx context.Context, id int32) (Tour, error) {
	row := q.db.QueryRow(ctx, getTourDetailByID, id)
	var i Tour
	err := row.Scan(
		&i.ID,
		&i.TieuDe,
		&i.MoTa,
		&i.DanhMucID,
		&i.SoNgay,
		&i.SoDem,
		&i.GiaMoiNguoi,
		&i.DonViTienTe,
		&i.TrangThai,
		&i.NoiBat,
		&i.NguoiTaoID,
		&i.NhaCungCapID,
		&i.DangHoatDong,
		&i.NgayTao,
		&i.NgayCapNhat,
	)
	return i, err
}

const getTourDetailByIDWithRelations = `-- name: GetTourDetailByIDWithRelations :one
SELECT
  t.id,
  t.tieu_de,
  t.mo_ta,
  t.danh_muc_id,
  t.so_ngay,
  t.so_dem,
  t.gia_moi_nguoi,
  t.don_vi_tien_te,
  t.trang_thai,
  t.noi_bat,
  t.nguoi_tao_id,
  t.nha_cung_cap_id,
  t.dang_hoat_dong,
  t.ngay_tao,
  t.ngay_cap_nhat
FROM tour t
LEFT JOIN danh_muc_tour dm ON dm.id = t.danh_muc_id
LEFT JOIN nha_cung_cap ncc ON ncc.id = t.nha_cung_cap_id
LEFT JOIN (
  SELECT td.tour_id, array_agg(DISTINCT d.ten) AS diem_den
  FROM tour_diem_den td
  JOIN diem_den d ON d.id = td.diem_den_id
  GROUP BY td.tour_id
) dd ON dd.tour_id = t.id
LEFT JOIN (
  SELECT tour_id, AVG(rating)::float AS avg_rating, COUNT(*)::int AS total_reviews
  FROM danh_gia
  WHERE dang_hoat_dong = TRUE
  GROUP BY tour_id
) dg ON dg.tour_id = t.id
LEFT JOIN (
  SELECT tour_id, MIN(ngay_khoi_hanh) FILTER (WHERE ngay_khoi_hanh >= CURRENT_DATE AND trang_thai IN ('len_lich','xac_nhan')) AS next_departure_date, MIN(gia_dac_biet) FILTER (WHERE ngay_khoi_hanh >= CURRENT_DATE AND trang_thai IN ('len_lich','xac_nhan') AND gia_dac_biet IS NOT NULL) AS min_price
  FROM khoi_hanh_tour
  GROUP BY tour_id
) kh ON kh.tour_id = t.id
WHERE t.id = $1
ORDER BY t.ngay_tao DESC
`

func (q *Queries) GetTourDetailByIDWithRelations(ctx context.Context, id int32) (Tour, error) {
	row := q.db.QueryRow(ctx, getTourDetailByIDWithRelations, id)
	var i Tour
	err := row.Scan(
		&i.ID,
		&i.TieuDe,
		&i.MoTa,
		&i.DanhMucID,
		&i.SoNgay,
		&i.SoDem,
		&i.GiaMoiNguoi,
		&i.DonViTienTe,
		&i.TrangThai,
		&i.NoiBat,
		&i.NguoiTaoID,
		&i.NhaCungCapID,
		&i.DangHoatDong,
		&i.NgayTao,
		&i.NgayCapNhat,
	)
	return i, err
}
