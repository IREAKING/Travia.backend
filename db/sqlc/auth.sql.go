// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
insert into nguoi_dung(ho_ten, email, mat_khau_ma_hoa, so_dien_thoai, vai_tro, dang_hoat_dong, xac_thuc, ngay_tao, ngay_cap_nhat)
values
    ($1, $2, $3, $4, $5, $6, $7, $8, $9)
    returning id, ho_ten, email, mat_khau_ma_hoa, so_dien_thoai, vai_tro, dang_hoat_dong, xac_thuc, ngay_tao, ngay_cap_nhat
`

type CreateUserParams struct {
	HoTen        string              `json:"ho_ten"`
	Email        string              `json:"email"`
	MatKhauMaHoa string              `json:"mat_khau_ma_hoa"`
	SoDienThoai  *string             `json:"so_dien_thoai"`
	VaiTro       NullVaiTroNguoiDung `json:"vai_tro"`
	DangHoatDong *bool               `json:"dang_hoat_dong"`
	XacThuc      *bool               `json:"xac_thuc"`
	NgayTao      pgtype.Timestamp    `json:"ngay_tao"`
	NgayCapNhat  pgtype.Timestamp    `json:"ngay_cap_nhat"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (NguoiDung, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.HoTen,
		arg.Email,
		arg.MatKhauMaHoa,
		arg.SoDienThoai,
		arg.VaiTro,
		arg.DangHoatDong,
		arg.XacThuc,
		arg.NgayTao,
		arg.NgayCapNhat,
	)
	var i NguoiDung
	err := row.Scan(
		&i.ID,
		&i.HoTen,
		&i.Email,
		&i.MatKhauMaHoa,
		&i.SoDienThoai,
		&i.VaiTro,
		&i.DangHoatDong,
		&i.XacThuc,
		&i.NgayTao,
		&i.NgayCapNhat,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, ho_ten, email, mat_khau_ma_hoa, so_dien_thoai, vai_tro, dang_hoat_dong, xac_thuc, ngay_tao, ngay_cap_nhat from nguoi_dung
where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (NguoiDung, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i NguoiDung
	err := row.Scan(
		&i.ID,
		&i.HoTen,
		&i.Email,
		&i.MatKhauMaHoa,
		&i.SoDienThoai,
		&i.VaiTro,
		&i.DangHoatDong,
		&i.XacThuc,
		&i.NgayTao,
		&i.NgayCapNhat,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, ho_ten, email, mat_khau_ma_hoa, so_dien_thoai, vai_tro, dang_hoat_dong, xac_thuc, ngay_tao, ngay_cap_nhat from nguoi_dung
where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (NguoiDung, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i NguoiDung
	err := row.Scan(
		&i.ID,
		&i.HoTen,
		&i.Email,
		&i.MatKhauMaHoa,
		&i.SoDienThoai,
		&i.VaiTro,
		&i.DangHoatDong,
		&i.XacThuc,
		&i.NgayTao,
		&i.NgayCapNhat,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :one
update nguoi_dung
set ho_ten = $1, email = $2, mat_khau_ma_hoa = $3, so_dien_thoai = $4, ngay_cap_nhat = $5
where id = $6
returning id, ho_ten, email, mat_khau_ma_hoa, so_dien_thoai, vai_tro, dang_hoat_dong, xac_thuc, ngay_tao, ngay_cap_nhat
`

type UpdateUserByIdParams struct {
	HoTen        string           `json:"ho_ten"`
	Email        string           `json:"email"`
	MatKhauMaHoa string           `json:"mat_khau_ma_hoa"`
	SoDienThoai  *string          `json:"so_dien_thoai"`
	NgayCapNhat  pgtype.Timestamp `json:"ngay_cap_nhat"`
	ID           pgtype.UUID      `json:"id"`
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) (NguoiDung, error) {
	row := q.db.QueryRow(ctx, updateUserById,
		arg.HoTen,
		arg.Email,
		arg.MatKhauMaHoa,
		arg.SoDienThoai,
		arg.NgayCapNhat,
		arg.ID,
	)
	var i NguoiDung
	err := row.Scan(
		&i.ID,
		&i.HoTen,
		&i.Email,
		&i.MatKhauMaHoa,
		&i.SoDienThoai,
		&i.VaiTro,
		&i.DangHoatDong,
		&i.XacThuc,
		&i.NgayTao,
		&i.NgayCapNhat,
	)
	return i, err
}
